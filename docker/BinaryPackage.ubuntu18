FROM ubuntu:18.04

ENV DEBIAN_FRONTEND=noninteractive

RUN echo "dash dash/sh boolean false" | debconf-set-selections && dpkg-reconfigure dash

RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y \
    ca-certificates \
    build-essential \
    git \
    wget \
    gnupg \
    lsb-release \
    software-properties-common \
    pkg-config \
    make \
    gcc-mingw-w64-x86-64 \
    g++-mingw-w64-x86-64 \
    clang \
    dos2unix \
    libssl-dev \
    zlib1g-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libreadline-dev \
    libsqlite3-dev \
    libgdbm-dev \
    libdb5.3-dev \
    libbz2-dev \
    libexpat1-dev \
    liblzma-dev tk-dev \
    unzip \
    zstd \
    curl \
    tar

WORKDIR /root

# Add llvm.sh script to install Clang 16
RUN wget https://apt.llvm.org/llvm.sh && \
    chmod +x llvm.sh && \
    ./llvm.sh 16 && \
    rm llvm.sh

# Set Clang 16 as default
RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100 && \
    update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 100

RUN wget https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3-linux-x86_64.sh && \
    chmod +x cmake-3.25.3-linux-x86_64.sh && \
    ./cmake-3.25.3-linux-x86_64.sh --skip-license --prefix=/usr/local

WORKDIR /root
RUN git clone --branch 25.01 https://github.com/ip7z/7zip.git
WORKDIR /root/7zip/CPP/7zip/Bundles/Alone2
RUN make -f makefile.gcc -j
RUN cp /root/7zip/CPP/7zip/Bundles/Alone2/_o/7zz /usr/local/bin/7z

WORKDIR /root
RUN git clone --branch v0.0.10 https://github.com/win-iconv/win-iconv.git

WORKDIR /root/win-iconv
RUN cmake \
    -D WIN_ICONV_BUILD_EXECUTABLE=OFF \
    -D CMAKE_INSTALL_PREFIX=/opt/win-iconv-64 \
    -D CMAKE_C_COMPILER=$(which x86_64-w64-mingw32-gcc) \
    -D CMAKE_CXX_COMPILER=$(which x86_64-w64-mingw32-g++) \
    . && \
    make install

WORKDIR /root

ENV PYTHON_VERSION=3.13.3

RUN wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && \
    tar xzf Python-${PYTHON_VERSION}.tgz

WORKDIR /root/Python-${PYTHON_VERSION}

RUN ./configure --prefix=/opt/linux-python && \
    make -j && make install

ENV PATH="/opt/linux-python/bin:$PATH"

WORKDIR /root

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
ENV PATH="/root/.cargo/bin:${PATH}"
RUN rustup target add x86_64-pc-windows-gnu

RUN mkdir /opt/win-python
WORKDIR /opt/win-python
RUN wget https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-python-3.12.10-1-any.pkg.tar.zst
RUN unzstd mingw-w64-x86_64-python-3.12.10-1-any.pkg.tar.zst
RUN tar -xf mingw-w64-x86_64-python-3.12.10-1-any.pkg.tar

RUN mkdir -p /root/out

WORKDIR /root

COPY docker/patches/ubuntu18/ /root/patches/

RUN git clone https://github.com/hashcat/hashcat.git

WORKDIR /root/hashcat

RUN bash -c 'shopt -s nullglob; for p in /root/patches/*.patch /root/patches/*.diff; do pwd && git apply "$p"; done'

WORKDIR /root

RUN cp -af hashcat hashcat-gcc && cp -af hashcat hashcat-clang

WORKDIR /root/hashcat-gcc

RUN make binaries -s

RUN tools/package_bin.sh

RUN cd /root/xy && \
    for f in hashcat-*; do \
        if [ -d "$f" ]; then \
            mv "$f" /root/out/"${f}-gcc"; \
        elif [ "${f##*.}" = "7z" ]; then \
            mv "$f" /root/out/"${f%.7z}-gcc.7z"; \
        fi; \
    done

WORKDIR /root/hashcat-clang

RUN make CC_LINUX=clang CC_WIN=clang CXX_LINUX=clang++ CXX_WIN=clang++ binaries -s

RUN tools/package_bin.sh

RUN cd /root/xy && \
    for f in hashcat-*; do \
        if [ -d "$f" ]; then \
            mv "$f" /root/out/"${f}-clang"; \
        elif [ "${f##*.}" = "7z" ]; then \
            mv "$f" /root/out/"${f%.7z}-clang.7z"; \
        fi; \
    done

CMD ["/bin/bash"]
